{
  "uid" : "3684f3cb8ac52e34",
  "name" : "test_signinout",
  "fullName" : "vizsgaremek.tc02_signinout_test#test_signinout",
  "historyId" : "016bd065a9e4cab8407ab711566d39ca",
  "time" : {
    "start" : 1628617179162,
    "stop" : 1628617189296,
    "duration" : 10134
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=92.0.4515.131)",
  "statusTrace" : "def test_signinout():\n        import time\n    \n        from selenium import webdriver\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n    \n        options = Options()\n        options.add_argument(\"--headless\")\n        options.add_argument(\"--disable-gpu\")\n    \n        driver = webdriver.Chrome(ChromeDriverManager().install(), chrome_options=options)\n    \n        try:\n            driver.get(\"http://localhost:1667/#/\")\n    \n            cookie_panel = driver.find_element_by_id('cookie-policy-panel')\n    \n            # Accept cookies\n            accept_btn = driver.find_element_by_xpath('//*[@id=\"cookie-policy-panel\"]/div/div[2]/button[2]')\n            accept_btn.click()\n    \n            # Login\n            login = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[2]/a')\n            login.click()\n    \n            time.sleep(3)\n    \n            username = \"Milvus\"\n    \n            def sign_in(em, pw):\n                email = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[1]/input')\n                password = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[2]/input')\n                button = driver.find_element_by_xpath('//*[@id=\"app\"]//form/button')\n    \n                email.send_keys(em)\n                password.send_keys(pw)\n                button.click()\n    \n            sign_in(\"milvus@example.com\", \"Abcd123$\")\n    \n            time.sleep(3)\n    \n            # Sign in check\n            un = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[4]/a')\n            assert (un.text == username)\n    \n            # Log out\n            driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[5]/a').click()\n            time.sleep(3)\n    \n            # Log out check\n            assert (login.text == \"Sign in\")\n    \n            # Cookies management check\n            driver.get(\"http://localhost:1667/#/\")\n>           assert not cookie_panel.is_displayed()\n\nvizsgaremek/tc02_signinout_test.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:486: in is_displayed\n    return self.parent.execute_script(\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:634: in execute_script\n    return self.execute(command, {\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8e4801cb50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#17 0x5569c0c51e58 \\\\u003Cunknown>\\\\n#18 0x5569c0c6bdfd \\\\u003Cunknown>\\\\n#19 0x7f4581a34609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=92.0.4515.131)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=92.0.4515.131)",
    "statusTrace" : "def test_signinout():\n        import time\n    \n        from selenium import webdriver\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n    \n        options = Options()\n        options.add_argument(\"--headless\")\n        options.add_argument(\"--disable-gpu\")\n    \n        driver = webdriver.Chrome(ChromeDriverManager().install(), chrome_options=options)\n    \n        try:\n            driver.get(\"http://localhost:1667/#/\")\n    \n            cookie_panel = driver.find_element_by_id('cookie-policy-panel')\n    \n            # Accept cookies\n            accept_btn = driver.find_element_by_xpath('//*[@id=\"cookie-policy-panel\"]/div/div[2]/button[2]')\n            accept_btn.click()\n    \n            # Login\n            login = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[2]/a')\n            login.click()\n    \n            time.sleep(3)\n    \n            username = \"Milvus\"\n    \n            def sign_in(em, pw):\n                email = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[1]/input')\n                password = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[2]/input')\n                button = driver.find_element_by_xpath('//*[@id=\"app\"]//form/button')\n    \n                email.send_keys(em)\n                password.send_keys(pw)\n                button.click()\n    \n            sign_in(\"milvus@example.com\", \"Abcd123$\")\n    \n            time.sleep(3)\n    \n            # Sign in check\n            un = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[4]/a')\n            assert (un.text == username)\n    \n            # Log out\n            driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[5]/a').click()\n            time.sleep(3)\n    \n            # Log out check\n            assert (login.text == \"Sign in\")\n    \n            # Cookies management check\n            driver.get(\"http://localhost:1667/#/\")\n>           assert not cookie_panel.is_displayed()\n\nvizsgaremek/tc02_signinout_test.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:486: in is_displayed\n    return self.parent.execute_script(\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:634: in execute_script\n    return self.execute(command, {\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8e4801cb50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...wn>\\\\n#17 0x5569c0c51e58 \\\\u003Cunknown>\\\\n#18 0x5569c0c6bdfd \\\\u003Cunknown>\\\\n#19 0x7f4581a34609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=92.0.4515.131)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8a8a02ed9136c4c9",
      "name" : "log",
      "source" : "8a8a02ed9136c4c9.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "9abdaaa85bfd2b9c",
      "name" : "stderr",
      "source" : "9abdaaa85bfd2b9c.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "vizsgaremek"
  }, {
    "name" : "suite",
    "value" : "tc02_signinout_test"
  }, {
    "name" : "host",
    "value" : "fv-az82-15"
  }, {
    "name" : "thread",
    "value" : "3770-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "vizsgaremek.tc02_signinout_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 0,
        "passed" : 9,
        "unknown" : 0,
        "total" : 15
      },
      "items" : [ {
        "uid" : "74f871d444a6d73",
        "reportUrl" : "https://Sdavid85.github.io/conduit/8//#testresult/74f871d444a6d73",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)",
        "time" : {
          "start" : 1628616688177,
          "stop" : 1628616691232,
          "duration" : 3055
        }
      }, {
        "uid" : "1b7e93ae195384e8",
        "reportUrl" : "https://Sdavid85.github.io/conduit/3//#testresult/1b7e93ae195384e8",
        "status" : "passed",
        "time" : {
          "start" : 1628255315621,
          "stop" : 1628255323553,
          "duration" : 7932
        }
      }, {
        "uid" : "f519b506edd68725",
        "reportUrl" : "https://Sdavid85.github.io/conduit/7//#testresult/f519b506edd68725",
        "status" : "passed",
        "time" : {
          "start" : 1628255091587,
          "stop" : 1628255101580,
          "duration" : 9993
        }
      }, {
        "uid" : "147c8256cb5a4750",
        "reportUrl" : "https://Sdavid85.github.io/conduit/3//#testresult/147c8256cb5a4750",
        "status" : "passed",
        "time" : {
          "start" : 1627411122158,
          "stop" : 1627411130168,
          "duration" : 8010
        }
      }, {
        "uid" : "f263854f83357c4",
        "reportUrl" : "https://Sdavid85.github.io/conduit/6//#testresult/f263854f83357c4",
        "status" : "passed",
        "time" : {
          "start" : 1627411061688,
          "stop" : 1627411069574,
          "duration" : 7886
        }
      }, {
        "uid" : "238415e3af713daf",
        "reportUrl" : "https://Sdavid85.github.io/conduit/3//#testresult/238415e3af713daf",
        "status" : "passed",
        "time" : {
          "start" : 1627410594011,
          "stop" : 1627410601917,
          "duration" : 7906
        }
      }, {
        "uid" : "6861ec91c2041c36",
        "reportUrl" : "https://Sdavid85.github.io/conduit/5//#testresult/6861ec91c2041c36",
        "status" : "passed",
        "time" : {
          "start" : 1627410569045,
          "stop" : 1627410577069,
          "duration" : 8024
        }
      }, {
        "uid" : "e68dd5499e4595ea",
        "reportUrl" : "https://Sdavid85.github.io/conduit/3//#testresult/e68dd5499e4595ea",
        "status" : "passed",
        "time" : {
          "start" : 1627410255859,
          "stop" : 1627410263664,
          "duration" : 7805
        }
      }, {
        "uid" : "e84576c121898a4",
        "reportUrl" : "https://Sdavid85.github.io/conduit/4//#testresult/e84576c121898a4",
        "status" : "passed",
        "time" : {
          "start" : 1627410213961,
          "stop" : 1627410222236,
          "duration" : 8275
        }
      }, {
        "uid" : "480800013d68b7e6",
        "reportUrl" : "https://Sdavid85.github.io/conduit/3//#testresult/480800013d68b7e6",
        "status" : "passed",
        "time" : {
          "start" : 1627409681625,
          "stop" : 1627409689648,
          "duration" : 8023
        }
      }, {
        "uid" : "c3a88b2be958b74c",
        "reportUrl" : "https://Sdavid85.github.io/conduit/1//#testresult/c3a88b2be958b74c",
        "status" : "broken",
        "statusDetails" : "ModuleNotFoundError: No module named 'webdriver_manager'",
        "time" : {
          "start" : 1627288974196,
          "stop" : 1627288974196,
          "duration" : 0
        }
      }, {
        "uid" : "697673a4b15406f2",
        "reportUrl" : "https://Sdavid85.github.io/conduit/1//#testresult/697673a4b15406f2",
        "status" : "broken",
        "statusDetails" : "ModuleNotFoundError: No module named 'webdriver_manager'",
        "time" : {
          "start" : 1627288056200,
          "stop" : 1627288056200,
          "duration" : 0
        }
      }, {
        "uid" : "b4c6c529f513ba64",
        "reportUrl" : "https://Sdavid85.github.io/conduit/2//#testresult/b4c6c529f513ba64",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"cookie-policy-panel\"]/div/div[2]/button[2]\"}\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627287903072,
          "stop" : 1627287904701,
          "duration" : 1629
        }
      }, {
        "uid" : "1d7bb1802aea035f",
        "reportUrl" : "https://Sdavid85.github.io/conduit/1//#testresult/1d7bb1802aea035f",
        "status" : "broken",
        "statusDetails" : "ModuleNotFoundError: No module named 'webdriver_manager'",
        "time" : {
          "start" : 1627287339084,
          "stop" : 1627287339085,
          "duration" : 1
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "3684f3cb8ac52e34.json",
  "parameterValues" : [ ]
}